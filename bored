#!/bin/bash

#############################
#    ____________________   #
#   /    boredbutton    /|  #
#  /   by knuxfanwin8  / |  #
#  \  ################ \ |  #
#   \___________________\|  #
#                           #
#############################
# Github: https://github.com/knuxfanwin8/boredbutton
# Current version:
version="v1.2.5"
versionnum="006"
# Feel free to fork and modify the code, as long as you don't claim it as your own!
###############################
# Have a good idea for an activity? Post it in an issue in the GitHub repo!
# Want to improve the code? Fork the repo, and make a pull request!
###############################

# Colors
background='\033[1;40m'
white='\033[1;37m'
error='\033[0;31m'
warn='\033[1;33m'
menuname='\033[1;32m'
randomcolor="\033[38;5;$(awk -v min=20 -v max=231 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')m"

# Set background
printf "$background$white"

# Variables
homedir=~/
arg=$1
arg2=$2
debug="false"

# List location
list=~/.bored/idealist.txt
# Counter location
counterfile=~/.bored/count.txt

# Fetch counter.
function getcounter {
if [ -e ~/.bored/count.txt ]
then
echo "$(cat ~/.bored/count.txt)"
else
echo "0"
fi
}
counter="$(getcounter)"

# Fetch updater toggle.
function gettoggle {
if [ -e ~/.bored/updater ]
then
echo "$(cat ~/.bored/updater)"
else
echo "0"
fi
}
updatertoggle="$(gettoggle)"


# Debugger
function boreddebug {
    if [ $debug = "true" ]; then echo -e "${error}DEBUG: ${white}$@"; fi
}

# Checks
if [ ! -d ~/.bored ]; then boreddebug "making .bored dir" && mkdir ~/.bored; fi
if [ ! -e $list ] || [ -z "$(cat $list)" ]; then boreddebug "creating activity list" && cp -f ~/.bored/defaultlist.txt ~/.bored/idealist.txt && chmod 777 $list; fi 
if [ ! -e $counterfile ]; then boreddebug "creating counter" && echo "0" > $counterfile && chmod 777 $counterfile; fi
if [ ! -e ~/.bored/updater ]; then boreddebug "creating updater toggle" && echo "0" > ~/.bored/updater && chmod 777 ~/.bored/updater; fi
if [ ! -r $list ] || [ ! -w $list ]; then boreddebug "fixing list perms" && chmod 777 $list; fi 
if [ ! -r $counterfile ] || [ ! -w $counterfile ]; then boreddebug "fixing counter perms" && chmod 777 $counterfile; fi

# Generate id count.
idcount=$(grep -c 'ID' $list)
boreddebug "idcount: $idcount"

# Functions
function aboutb {
    echo "boredbutton $version - the ultimate anti-boredom utility"
    echo "Github: https://github.com/knuxfanwin8/boredbutton"
}

function fupdatertoggle {
	if [ "$updatertoggle" = "1" ]; then echo "0" > ~/.bored/updater && updatertoggle="0"; else echo "1" > ~/.bored/updater && updatertoggle="1"; fi
	echo "Updater: "; if [ "$updatertoggle" = "1" ]; then echo "ON"; else echo "OFF"; fi
}

function fprintact {
	cat ~/.bored/idealist.txt
	exit
}

function fdel {
    rm -rf $counterfile
    echo "0" > $counterfile
	counter=0
    echo -e "${warn}Counter cleared.${white}"
}

function fdecr {
    let counter--
    echo "$counter" > $counterfile
    echo -e "The current count is now ${warn}$counter${white}."
}

function fset {
    clear
    echo -e "${warn}### Set counter value ###${white}"
    echo "Input value: (Must be a valid number!)"
    read -re newval
    # prevent the user from inputing an invalid value.
    re='^[0-9]+$'
    if ! [[ $newval =~ $re ]]
    then
        echo -e "${error}[ERROR]${white} Not a number! Please restart ${warn}bored setup${white} and input a valid number."
        exit
    fi
    echo "$newval" > $counterfile
	counter=$newval
    echo -e "Changed the count to ${warn}$newval${white}!"
}
function factdel {
    rm -rf $list
	touch $list
	idcount=0
    echo -e "Idea list restored."
	if [ $setup = "0" ]; then exit; fi
}
function factnew {
    clear
    echo -e "${warn}### New idea ###${white}"
    echo "Checking for existing activities..."
    idcount=$(grep -c 'ID' $list)
    clear
    echo -e "${warn}### Create a new idea ###${white}"
    echo "Welcome to the Idea Creation Wizard."
    echo "Please type in the idea you want to add, for example, 'Write a script'. This is going to appear after 'How about you...', so make sure it fits."
    read -re newactname
    clear
    echo -e "${warn}### Create a new idea ###${white}"
    echo -e "${warn}Done!${white}"
    echo "Now, please type in the idea description, for example, 'Make a cool script that makes your life easier'."
    read -re newactdesc
    clear
    echo -e "${warn}### Create a new idea ###${white}"
    echo -e "${warn}A new idea will be added with the following info:${white}"
    echo -e "Name: ${warn}$newactname${white}"
    echo -e "Description: ${warn}$newactdesc${white}"
    echo -e "If this is correct, press ${warn}Enter${white}. If it's not, press ${warn}Ctrl+C${white}."
    read -ren1
    let idcount++
    echo "ID$idcount" >> $list
    echo 'name="'"$newactname"'"' >> $list
    echo 'desc="'"$newactdesc"'"' >> $list
    clear
    echo -e "${warn}### Create a new idea ###${white}"
    echo "Done! Your new idea has been added."
    exit
}
function fpackmake {
	clear
	echo -e "${warn}### Package idea lists ###${white}"
	echo -e "Type in the directory in which the package should be placed."
	echo "Note: this will overwrite any file with this name."
	read -re packdir
	packdir=${packdir/'~'/$HOME}
	if [ -z $packdir ]; then
		packdir=$PWD/package.bored
	fi	
	if [ -d $packdir ]; then
		packdir=$packdir/package.bored
	fi
	clear
	echo "Preparing..."
	grep -v -x -f ~/.bored/defaultnoid.txt ~/.bored/idealist.txt | sed '/^ID/ d' > $packdir
	boreddebug "$(cat $packdir)"
	clear
	echo "Done! Saved in $packdir."
	exit
}
function fpackload {
	clear
	echo -e "${warn}### Load package ###${white}"
	echo -e "Type in the package's location."
	read -re packdir
	if [ -z $packdir ]; then
		packdir=$PWD/package.bored
	fi	
	if [ -d $packdir ]; then
		packdir=$packdir/package.bored
	fi
	packdir=${packdir/'~'/$HOME}
	# BEGIN
		idcount=$(grep -c 'ID' $list)
		boreddebug "$idcount" 
		cp -f $packdir ~/.bored/packtmp &> /dev/null
		while IFS= read -r line
		do
			boreddebug "Reading line $line..."
			if [[ "$line" == "name="* ]] && ! grep -q "$line" ~/.bored/idealist.txt
			then
				boreddebug "--! Line contains name: $line"
				let idcount++
				boreddebug "ID count now: $idcount"
				grep -A1 "$line" ~/.bored/packtmp > ~/.bored/packtmpf
				sed "/$line/ { N; s/$line/ID$idcount\n&/ }" ~/.bored/packtmpf >> ~/.bored/idealist.txt
			fi
		done < "$HOME/.bored/packtmp"
		boreddebug "$(cat ~/.bored/packtmp)"
		rm -f ~/.bored/packtmp
		rm -f ~/.bored/packtmpf
	# END
	echo "Done!"
	exit
}

# Idea manager
function ideamanedit {
	clear
	grep -v "ID" ~/.bored/tmp > ~/.bored/tmp2
	cat ~/.bored/tmp2 > ~/.bored/tmp
	source ~/.bored/tmp
	echo "Type in a new name (leave empty to keep old name):"
	read -re newname
	if ! [ -z "$newname" ]; then name="$newname"; fi
	echo "Type in a new description (leave empty to keep old description):"
	read -re newdesc
	if ! [ -z "$newdesc" ]; then desc="$newdesc"; fi
	clear
	echo "ID$idpick" > ~/.bored/tmp
	echo 'name="'"$name"'"' >> ~/.bored/tmp
	echo 'desc="'"$desc"'"' >> ~/.bored/tmp
	boreddebug "$(cat ~/.bored/tmp)"
	source ~/.bored/tmp &> /dev/null
	echo "New settings:"
	while read line; do
  		if echo "$line" | grep -q "ID"; then echo -e "$error$line"; fi
		if echo "$line" | grep -q "name"; then echo -e "$warn- Name: $white${line:5}"; fi
		if echo "$line" | grep -q "desc"; then echo -e "$warn- Description: $white${line:5}"; fi
	done <~/.bored/tmp
	echo "If this is ok, press any button. If it isn't, press Ctrl+C."
	read -ren1
	clear
	boreddebug "Begin saving..."
	boreddebug "sed for lines"
	sed -i "/ID$idpick/,+2d" ~/.bored/idealist.txt
	boreddebug "Add new lines"
	cat ~/.bored/tmp >> ~/.bored/idealist.txt
	echo "Done!"
	exit
}
function ideamandel {
	echo -e "${error}ARE YOU SURE YOU WANT TO DO THIS?${white}"
	echo "If this is ok, press any button. If it isn't, press Ctrl+C."
	read -ren1
	clear
	boreddebug "Begin deletion process..."
	boreddebug "sed for lines"
	sed -i "/ID$idpick/,+2d" ~/.bored/idealist.txt
	boreddebug "Fix the IDs"
	currentline=0
	printf "" > ~/.bored/tmp2
	while read line; do
		let currentline++
		if echo "$line" | grep -q "ID"; then
			let idparsed++
			if [ "$idparsed" -gt "$idpick" ] || [ "$idparsed" = "$idpick" ]; then
				sed -i '/ID$idparsed/,+2d' ~/.bored/idealist.txt
				sed -i "${currentline}s/.*/ID${idparsed}/" ~/.bored/idealist.txt
			fi
		fi
	done <~/.bored/idealist.txt
	cat ~/.bored/tmp2
	echo "Done!"
	exit
}
function ideaman {
	clear
	menuloop=0
	echo "Ideas:"
	while read line; do
  		if echo "$line" | grep -q "ID"; then echo -e "$error$line"; fi
		if echo "$line" | grep -q "name"; then echo -e "$warn- Name: $white${line:5}"; fi
		if echo "$line" | grep -q "desc"; then echo -e "$warn- Description: $white${line:5}"; fi
	done <~/.bored/idealist.txt
	echo "==="
	echo -e "${menuname}Type in the ID of the idea you want to edit. Type in anything else to create a new idea."
while [ "$menuloop" = "0" ]; do
	read -re idpick
	idpick=${idpick//ID/}
	boreddebug "$idpick"
	grep -A2 ID$idpick $list > ~/.bored/tmp
	boreddebug "$(cat ~/.bored/tmp)"
	re='^[0-9]+$'
	if [ -z "$(cat ~/.bored/tmp)" ] || [ -z "$idpick" ] || ! [[ $idpick =~ $re ]]; then
		factnew
	else 
		menuloop=1
	fi
done
	clear
	while read line; do
  		if echo "$line" | grep -q "ID"; then echo -e "$error$line"; fi
		if echo "$line" | grep -q "name"; then echo -e "$warn- Name: $white${line:5}"; fi
		if echo "$line" | grep -q "desc"; then echo -e "$warn- Description: $white${line:5}"; fi
	done <~/.bored/tmp
	while [ "$menuloop" = "1" ]; do
	echo "### Pick an option. ###"
	echo -e "${warn}Edit this idea${white} - edit"
	echo -e "${warn}Delete this idea${white} - del"
	echo -e "${warn}Exit${white} - exit"
	read -re menuoption
	if ! [ "$menuoption" = "edit" ] && ! [ "$menuoption" = "del" ] && ! [ "$menuoption" = "exit" ]; then
		echo "Wrong option!"
	else
		menuloop=2
	fi
	done
	if [ "$menuoption" = "exit" ]; then exit; else ideaman$menuoption; fi
}

# Setup utility
function setup {
noupdate=1
boreddebug "Starting setup utility..."
while true
do
    clear
	echo -e "${warn}boredbutton ${menuname}$version"
	echo -e "${white}You used the button ${warn}$counter${white} times."
	echo -e "\n${menuname}### Counter options ###${white}\n"
	echo -e "${menuname}Remove counter data${white} - ${warn}del${white}."
	echo -e "${menuname}Decrease counter by 1${white} - ${warn}decr${white}."
	echo -e "${menuname}Set counter value${white} - ${warn}set${white}."
	echo -e "\n${menuname}### Idea options ###${white}\n"
	echo -e "${warn}Ideas: ${menuname}${idcount}${white}"
	echo -e "${menuname}Idea manager (view ideas, edit, delete, create)${white} - ${warn}ideaman${white}."
	echo -e "${menuname}Remove all ideas (will be restored to default after restart if none are created)${white} - ${warn}actdel${white}."
	echo -e "${menuname}Package idea list for distribution${white} - ${warn}packmake${white}"
	echo -e "${menuname}Load an idea list${white} - ${warn}packload${white}"
    echo -e "\n${menuname}Note: ${white}To recreate idea data, run ${warn}bored${white}."
    echo -e "\n${menuname}### Updater ###${white}\n"
	if [ "$updatertoggle" = "1" ]; then echo -e "${warn}Updater: ${menuname}ON${white}"; else echo -e "${warn}Updater: ${menuname}OFF${white}"; fi
	echo -e "${menuname}Toggle updater on/off${white} - ${warn}updatertoggle${white}."
	echo -e "\n${menuname}### Exit ###${white}\n"
	echo -e "To exit, type anything else or just press Enter."
	echo -e "\n${menuname}######################${white}"
	read -re choice
    boreddebug "Choice: $choice"
	lookfor=f$choice
	if ! [ -z $choice ]
	then
    	if [ "$(type -t $lookfor)" = "function" ]
    	then
        	$lookfor
		else
			if [ "$choice" = "ideaman" ]; then ideaman; exit
			else exit; fi
    	fi
	else
		exit
	fi
done
exit

}

# Argument checks
if [ "$arg" = "--about" ] || [ "$arg2" = "--about" ]; then aboutb && exit; fi
if [ "$arg" = "--debug" ] || [ "$arg2" = "--debug" ]; then debug=true; else debug=false; fi 
if [ "$arg" = "setup" ] || [ "$arg2" = "setup" ]; then setup=1 && setup; else setup=0; fi
if [ "$arg" = "ideaman" ] || [ "$arg2" = "ideaman" ]; then ideaman; fi
lookfor=f$arg
lookfor2=f$arg2
if [ "$(type -t $lookfor)" = "function" ]; then $lookfor; fi
if [ "$(type -t $lookfor2)" = "function" ]; then $lookfor2; fi

# Updater
if [ "$updatertoggle" = "1" ]
then
function boredupdater {
	boreddebug "..."
	update=${updateraw:12:-4}
	updatenum="${updateraw//boredbutton $update /}"
	if [ -z "$updateraw" ]
	then
		boreddebug "No internet! Skipping update."
	else
		if [ "$version" = "$update" ]
		then
			echo -e "\rNo updates available."
		else
			if [ "$versionnum" -lt "$updatenum" ]
			then
				echo -e "${white}An update is available."
				echo -e "Current version: ${warn}$version ($versionnum)${white}"
				echo -e "Newest version: ${warn}$update ($updatenum)${white}"
				if hash git 2>/dev/null; then				
					echo "To install it, press 'y'."
					read -ren1 option
					if [ "$option" = "y" ] || [ "$option" = "Y" ]
					then
						clear
						echo -e "${white}[=   ]"
						echo "Preparing..."
						rm -rf ~/.bored/update
						mkdir ~/.bored/update
						clear
						echo -e "${white}[==  ]"
						echo "Downloading new version..."
						git clone --branch stable-compiled https://github.com/knuxfanwin8/boredbutton ~/.bored/update &>/dev/null
						clear
						echo -e "${white}[=== ]"
						echo "Installing new version..."
						~/.bored/update/install --skipconfirm &>/dev/null
						clear
						echo -e "${white}[====]"
						echo "Done!"
						echo "Please run bored again. "
						exit
					fi
				else
					echo "You can download it from the github repository."
				fi		
			else
				echo "An error has occured! This is most likely an issue with the software version repository."	
			fi
		fi
	fi
}
noupdate=0
if ! hash curl 2>/dev/null; then
	echo -e "${warn}[NOTE]${white} curl is not installed! Update check will be skipped."
	echo "To disable the updater use 'bored updatertoggle'."
	noupdate=1
else
	echo -e "${white}Checking for updates..."
	updateraw=$(curl -s https://knuxfanwin8.github.io/softversions/index.html | grep "boredbutton")
	boredupdater
fi
fi

# Idea generator
# Increase counter by 1.
let counter++
echo "$counter" > $counterfile
boreddebug "$counter saved to $counterfile"
# Display some info
echo -e "${white}boredbutton ${warn}$version${white} | do ${menuname}'bored setup'${white} for utilities | you used the button ${warn}$counter${white} times"
# Pick a random ID.
randomid=$(awk -v min=1 -v max=$idcount 'BEGIN{srand(); print int(min+rand()*(max-min+1))}')
boreddebug "random id: $randomid"
# Get the entry.
grep -A2 ID$randomid $list > ~/.bored/tmp
if [ -z "$(cat ~/.bored/tmp)" ]
then
	echo "ID $randomid not found!"
	echo "Have you been tampering with the idea list manually?"
	echo "Read this for more information:"
	echo "https://github.com/knuxfanwin8/boredbutton/wiki/Idea-lists"
	exit
fi
source ~/.bored/tmp &> /dev/null
boreddebug "$(cat ~/.bored/tmp)"
# Output everything.
echo -e "${randomcolor}###${white}"
echo -e "${white}So you're bored, right? How about you:"
echo -e "${randomcolor}${name}${white}"
echo "${desc}"

# Reset colors
printf "\033[0m"

boreddebug "Done in $SECONDS seconds."
exit
